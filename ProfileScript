#__________–ó–º—ñ–Ω–Ω—ñ_____________

# –®–ª—è—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É 
$exportFolder = "C:\Win11Upgrade" # –ú–û–ñ–ù–ê –ó–ú–Ü–ù–ò–¢–ò –ó–ê –ü–û–¢–†–ï–ë–ò

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
$autoDeleteDuplicates = $false  # $true - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞–ø–∏—Ç–∞–Ω—å, $false - –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é.

#_____________________________

# –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
$systemUsers = Get-WmiObject Win32_UserAccount | Where-Object { $_.LocalAccount -eq $true }
$userSIDMap = @{}
foreach ($user in $systemUsers) {
    $userSIDMap[$user.SID] = $user.Name
}

# –ó—á–∏—Ç—É—î–º–æ SID-–∏ –∑ —Ä–µ—î—Å—Ç—Ä—É ProfileList
$profileListKey = 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList'
$registryProfiles = Get-ChildItem -Path $profileListKey
$profilePaths = @{}
$duplicatePaths = @{}
$ghosts = @()

Write-Host "`n _-_-_-_- –ü–†–û–§–Ü–õ–Ü -_-_-_-_`n" -BackgroundColor Yellow -ForegroundColor Black

foreach ($sidKey in $registryProfiles) {
    $sid = $sidKey.PSChildName
    $profilePath = (Get-ItemProperty -Path $sidKey.PSPath).ProfileImagePath

    # –ó–±–∏—Ä–∞—î–º–æ SID ProfilePath
    if ($profilePaths.ContainsKey($profilePath)) {
        $duplicatePaths[$profilePath] += $sid
    } else {
        $profilePaths[$profilePath] = $sid
        $duplicatePaths[$profilePath] = @($sid)
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–≤–∏–¥—ñ–≤
    if (-not $userSIDMap.ContainsKey($sid)) {
        $ghosts += [PSCustomObject]@{
            SID = $sid
            ProfilePath = $profilePath
        }
    }
}

# –≤–∏–≤—ñ–¥ —à–ª—è—Ö–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
$hasRealDuplicates = $false
foreach ($pair in $duplicatePaths.GetEnumerator()) {
    if ($pair.Value.Count -gt 1) {
        $hasRealDuplicates = $true
        break
    }
}

if (-not $hasRealDuplicates) {
    Write-Host "üü• –î—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ (ProfileImagePath):" -ForegroundColor Green
}
else {
    Write-Host "üü• –î—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ (ProfileImagePath):" -ForegroundColor Red
    foreach ($pair in $duplicatePaths.GetEnumerator()) {
        if ($pair.Value.Count -gt 1) {
            Write-Host "`nPath: $($pair.Key)"
            foreach ($dupSID in $pair.Value) {
                if ($userSIDMap.ContainsKey($dupSID)) {
                    Write-Host "  SID: $dupSID  ‚Üí  User: $($userSIDMap[$dupSID])"
                }
                elseif ($dupSID -eq $pair.Value[0]) {
                    Write-Host "  SID: $dupSID  ‚Üí  User: [–ê–∫—Ç–∏–≤–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–∏–π)]"
                }
                else {
                    Write-Host "  SID: $dupSID  ‚Üí  User: [–ù–µ—ñ—Å–Ω—É—é—á–∏–π –¥—É–±–ª—ñ–∫–∞—Ç]"
                }
            }
        }
    }
}

# –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è SID-–ø—Ä–∏–≤–∏–¥–∏
if ($ghosts.Count -gt 0) {
    Write-Host "`nüü® –û–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏-–ø—Ä–∏–≤–∏–¥–∏ (SID —É —Ä–µ—î—Å—Ç—Ä—ñ, –∞–ª–µ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º—ñ):" -ForegroundColor Yellow
    foreach ($ghost in $ghosts) {
        Write-Host "  SID: $($ghost.SID)  ‚Üí  Profile: $($ghost.ProfilePath)"
    }
}
else {
    Write-Host "`nüü© –û–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤-–ø—Ä–∏–≤–∏–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." -ForegroundColor Green
}

# --- –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ ---
if ($hasRealDuplicates) {
    if (-not $autoDeleteDuplicates) {
        $userInput = Read-Host "`n –•–æ—á–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤? (y/n)"
        if ($userInput -ne 'y') {
            Write-Host "`n –í–∏—Ä—ñ—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤—Ä—É—á–Ω—É —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ." -ForegroundColor Yellow
            return
        }
    }
    else {
        Write-Host "`n –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ." -ForegroundColor DarkGray
    }
}


# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –µ–∫—Å–ø–æ—Ä—Ç—É –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
if (-not (Test-Path $exportFolder)) {
    New-Item -Path $exportFolder -ItemType Directory | Out-Null
}
$exportFile = Join-Path $exportFolder "duplicate_profiles.txt"
"–°–ø–∏—Å–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤:`n" | Out-File -FilePath $exportFile -Encoding UTF8

# –µ–∫—Å–ø–æ—Ä—Ç —É .reg, –ª–æ–≥—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è
foreach ($pair in $duplicatePaths.GetEnumerator()) {
    $sids = $pair.Value
    if ($sids.Count -gt 1) {
        # –í–∏–±—ñ—Ä SID, —è–∫–∏–π –∑–∞–ª–∏—à–∏—Ç–∏
        $sidToKeep = $sids | Where-Object { $userSIDMap.ContainsKey($_) } | Select-Object -First 1
        if (-not $sidToKeep) {
            $sidToKeep = $sids[0]
        }

        $sidsToDelete = $sids | Where-Object { $_ -ne $sidToKeep }

        foreach ($sid in $sidsToDelete) {
            $regPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid"
            $regExportPath = Join-Path $exportFolder "$sid.reg"

            if (Test-Path $regPath) {
                try {
                    # –ï–∫—Å–ø–æ—Ä—Ç .reg
                    $cmd = "reg export `"HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid`" `"$regExportPath`" /y"
                    Write-Host "–ï–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–∞ $sid –¥–æ $regExportPath"
                    cmd.exe /c $cmd | Out-Null

                    # –õ–æ–≥
                    "–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∫–ª—é—á SID: $sid –¥–æ —Ñ–∞–π–ª—É: $regExportPath" | Out-File -FilePath $exportFile -Append -Encoding UTF8

                    # –í–∏–¥–∞–ª–µ–Ω–Ω—è
                    Remove-Item -Path $regPath -Recurse -Force
                    Write-Host "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç SID: $sid" -ForegroundColor Magenta
                }
                catch {
                    Write-Host "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ $sid : $_" -ForegroundColor Red
                }
            }
        }
    }
}

